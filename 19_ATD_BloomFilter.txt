АТД фильтр Блюма.

1. АТД BloomFilter

==============================================================================================
================================= Начало АТД BloomFilter =====================================

// АТД BloomFilter
abstract class BloomFilter<T>


    // конструктор
    // постусловие: создан пустой фильтр Блюма
    public BloomFilter<T> BloomFilter(int sz, int func_count); 


    // команды

// добавить значение в фильтр Блюма
// постусловие: значение добавлено в фильтр Блюма
    public void add(T value);


    // запросы:

// проверить, есть ли значение в фильтре Блюма
    public boolean is_value(T value);

// получить размер фильтра Блюма
    public int size();


    // дополнительные запросы:

================================ Завершение АТД BloomFilter ==================================
==============================================================================================


2. Реализация BloomFilter

==============================================================================================
============================ Начало реализации АТД BloomFilter ===============================

class BloomFilter:


    ## конструктор
    # постусловие: создан пустой фильтр Блюма
    def __init__(self, sz, func_count):
        '''
        Рекомендуемое количество хэш-функций такое:
        func_count = 0,6931 * sz / n
        Где n - число элементов, которое будет добавлено в фильтр Блюма
        Например, для длины 10 бит и 3 элементов достаточно (округленно) 2 хэш-функции
        '''
        assert sz > 0
        assert func_count > 0
        self._size = sz
        self._func_count = func_count
        self._filter = 0


    ## приватные функции
    
    # получение значения хэша по переданному значению и номеру функции
    def _hash_fun(self, value, func_num):
        # добавляем номер функции к переданному значению        
        # используем функцию hash: она никогда не возвращает -1
        return hash(str(func_num) + str(value))


    # Формирует битовую маску на основе значения хэш функции
    def _hash_bitmask(self, hash_value):
        return 2 ** (hash_value % self._size)


    ## команды

    # добавить значение в фильтр Блюма
    # постусловие: значение добавлено фильтр Блюма
    def add(self, value):
        for func_num in range(self._func_count):
            bitmask = self._hash_bitmask(self._hash_fun(value, func_num))
            self._filter |= bitmask


    ## запросы:

    # проверить, есть ли значение в фильтре Блюма
    def is_value(self, value):

        # Соберём общую битовую маску
        total_bitmask = 0
        for func_num in range(self._func_count):
            bitmask = self._hash_bitmask(self._hash_fun(value, func_num))
            total_bitmask |= bitmask

        return (total_bitmask & self._filter) == total_bitmask


    #  получить размер фильтра Блюма
    def size(self):
        return self._size

========================== Завершение реализации АТД BloomFilter =============================
==============================================================================================
