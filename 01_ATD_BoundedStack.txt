class BoundedStack<T>

  // скрытые поля
  private List<T> stack; // основное хранилище стека
  private int peek_status; // статус запроса peek()
  private int pop_status; // статус команды pop()
  private int push_status; // статус команды push()
  private int stack_size_max; // максимально допустимый размер стека

  // интерфейс класса, реализующий АТД Stack
  public const int POP_NIL = 0;
  public const int POP_OK = 1;
  public const int POP_ERR = 2;
  public const int PEEK_NIL = 0;
  public const int PEEK_OK = 1;
  public const int PEEK_ERR = 2;
  public const int PUSH_NIL = 0;
  public const int PUSH_OK = 1;
  public const int PUSH_ERR = 2;
  public const int STACK_SIZE_DEFAULT_MAX = 32; // максимально допустимый размер стека по-умолчанию

  public void BoundedStack(int size) // конструктор
    stack_size_max = size
    clear()

  public void BoundedStack() // конструктор без параметра
    BoundedStack(STACK_SIZE_DEFAULT_MAX)

  public void push(T value)
    if size() < stack_size_max
      stack.Append(value)
      push_status = PUSH_OK
    else
      push_status = PUSH_ERR

  public void pop()
    if size() > 0
      stack.RemoveAt(-1)
      pop_status = POP_OK
    else
      pop_status = POP_ERR

  public void clear()
    stack = [ ] // пустой список/стек

    // начальные статусы для предусловий peek(), pop() и push()
    peek_status = PEEK_NIL
    pop_status = POP_NIL
    push_status = PUSH_NIL

  public T peek()
    if size() > 0
      result = stack[-1]
      peek_status = PEEK_OK
    else
      result = 0
      peek_status = PEEK_ERR
    return result

  public int size()
    return stack.Length()

  // запросы статусов
  public int get_pop_status()
    return pop_status

  public int get_peek_status()
    return peek_status

  public int get_push_status()
    return push_status
